vector<int> t(800001);
vector<int> euler;
vector<int> adj[100001];
int timestamp = -1;
vector<int> first(100001);
vector<int> d(100001);
vector<bool> visited(100001);
int build (int i,int left, int right){
   if (left == right){
    t[i] = first[euler[left]];
    return t[i];
   }
   int leftsum = build(i*2, left, mid);
   int rightsum = build(i*2+1, mid+1, right);
   t[i] = min(leftsum, rightsum);
   return t[i];
}

int find(int i,int l,int r,int left,int right){
    if (l>r || l==0 && r==0)return 0;
   if (l==left && r==right)return t[i];
  if (r<=mid){
    return find(i*2, l,r,left,mid);
    }
  else  if (l>mid)return find(i*2+1, l,r,mid+1, right);
  else {
    int leftsum = find(i*2, l,mid, left, mid);
    int rightsum = find(i*2+1,mid+1,r, mid+1, right);
    return min(leftsum ,rightsum);
  }

}

void dfs(int i, int depth = 0){
    visited[i] = true;
    timestamp++;
    euler.pb(i);
    d[i] = depth;
    first[i] = timestamp;
    for (auto e: adj[i]){
        if (!visited[e]){
            dfs(e, depth + 1);
            timestamp++;
            euler.pb(i);
        }
    }

}
int lca(int x, int y){
    if (first[x]>first[y]) swap(x, y);
    int timestampLca = find(1, first[x], first[y], 0, euler.size() - 1);
    return euler[timestampLca];
}
